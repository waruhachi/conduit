name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Existing release tag to update (e.g. v1.2.3)'
        required: true
        type: string
      remove_old_assets:
        description: 'Remove existing assets before uploading new ones'
        required: false
        default: true
        type: boolean

jobs:
  build-android:
    name: Build Android
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Mark Workspace as Safe (Git)
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Git Diagnostics (pre-build)
        run: |
          set -e
          git --version
          git rev-parse HEAD || true
          git tag -l | head -n 10 || true

      - name: Set Up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install Dependencies
        run: flutter pub get

      - name: Generate Freezed Classes
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Determine Release Tag and Version
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_TAG="${{ inputs.tag }}"
          else
            RELEASE_TAG="${{ github.ref_name }}"
          fi
          VERSION_NAME="${RELEASE_TAG#v}"

          CURRENT_VERSION_LINE=$(grep "^version:" pubspec.yaml || true)
          CURRENT_BUILD=$(echo "$CURRENT_VERSION_LINE" | awk -F'+' '{print $2}')
          [[ -z "$CURRENT_BUILD" ]] && CURRENT_BUILD=1

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RUN_NUM=${GITHUB_RUN_NUMBER:-1}
            BUILD_NUMBER=$((CURRENT_BUILD + RUN_NUM))
          else
            BUILD_NUMBER="$CURRENT_BUILD"
          fi

          {
            echo "RELEASE_TAG=$RELEASE_TAG"
            echo "VERSION_NAME=$VERSION_NAME"
            echo "BUILD_NUMBER=$BUILD_NUMBER"
          } >> "$GITHUB_ENV"

          echo "Using tag=$RELEASE_TAG version=$VERSION_NAME build=$BUILD_NUMBER"

      - name: Build APK (per ABI, unsigned)
        run: flutter build apk --split-per-abi --release --build-name "$VERSION_NAME" --build-number "$BUILD_NUMBER"

      - name: Build App Bundle (unsigned)
        run: flutter build appbundle --release --build-name "$VERSION_NAME" --build-number "$BUILD_NUMBER"

      - name: List Android Outputs
        run: |
          echo "APK files:"
          ls -1 build/app/outputs/flutter-apk || true
          echo "Bundle files:"
            ls -1 build/app/outputs/bundle/release || true

      - name: Upload Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: |
            build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
            build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
            build/app/outputs/flutter-apk/app-x86_64-release.apk
            build/app/outputs/bundle/release/app-release.aab

  build-ios:
    name: Build iOS
    runs-on: macos-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Mark Workspace as Safe (Git)
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Git Diagnostics (pre-build)
        run: |
          set -e
          git --version
          git rev-parse HEAD || true
          git tag -l | head -n 10 || true

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install Dependencies
        run: flutter pub get

      - name: Generate Freezed Classes
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Install CocoaPods Dependencies
        run: |
          set -e
          cd ios
          pod install --repo-update

      - name: Determine Release Tag and Version
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_TAG="${{ inputs.tag }}"
          else
            RELEASE_TAG="${{ github.ref_name }}"
          fi
          VERSION_NAME="${RELEASE_TAG#v}"

          CURRENT_VERSION_LINE=$(grep "^version:" pubspec.yaml || true)
          CURRENT_BUILD=$(echo "$CURRENT_VERSION_LINE" | awk -F'+' '{print $2}')
          [[ -z "$CURRENT_BUILD" ]] && CURRENT_BUILD=1

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RUN_NUM=${GITHUB_RUN_NUMBER:-1}
            BUILD_NUMBER=$((CURRENT_BUILD + RUN_NUM))
          else
            BUILD_NUMBER="$CURRENT_BUILD"
          fi

          {
            echo "RELEASE_TAG=$RELEASE_TAG"
            echo "VERSION_NAME=$VERSION_NAME"
            echo "BUILD_NUMBER=$BUILD_NUMBER"
          } >> "$GITHUB_ENV"

          echo "Using tag=$RELEASE_TAG version=$VERSION_NAME build=$BUILD_NUMBER"

      - name: Build iOS (Attempt IPA)
        shell: bash
        run: |
          set -e
          if ! flutter build ipa --release --no-codesign --build-name "$VERSION_NAME" --build-number "$BUILD_NUMBER"; then
            echo "Primary ipa build failed (will attempt fallback)."
          fi

      - name: Fallback Build iOS App (if IPA missing)
        shell: bash
        run: |
          set -e
          if ls build/ios/ipa/*.ipa 1>/dev/null 2>&1; then
            echo "IPA already exists; skipping fallback."
          else
            flutter build ios --release --no-codesign --build-name "$VERSION_NAME" --build-number "$BUILD_NUMBER"
          fi

      - name: Manual Package Unsigned IPA (if needed)
        shell: bash
        run: |
          set -e
          if ls build/ios/ipa/*.ipa 1>/dev/null 2>&1; then
            echo "IPA present; manual packaging not required."
            exit 0
          fi
          APP_PATH="build/ios/iphoneos/Runner.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "ERROR: Runner.app not found at $APP_PATH"
            exit 1
          fi
          mkdir -p build/ios/ipa
          rm -rf Payload
          mkdir Payload
          cp -R "$APP_PATH" Payload/
          (zip -qry build/ios/ipa/Runner-unsigned.ipa Payload)
          rm -rf Payload
          echo "Created unsigned IPA at build/ios/ipa/Runner-unsigned.ipa"

      - name: List iOS Build Outputs
        run: |
          echo "=== iOS Outputs (files) ==="
          find build/ios -maxdepth 4 -type f -print || true
          echo "=== IPA dir ==="
          ls -1 build/ios/ipa || true

      - name: Upload iOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios
          path: build/ios/ipa/*.ipa

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs:
      - build-android
      - build-ios

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Mark Workspace as Safe (Git)
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Determine Release Tag and Version
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_TAG="${{ inputs.tag }}"
          else
            RELEASE_TAG="${{ github.ref_name }}"
          fi
          VERSION_NAME="${RELEASE_TAG#v}"
          CURRENT_VERSION_LINE=$(grep "^version:" pubspec.yaml || true)
          CURRENT_BUILD=$(echo "$CURRENT_VERSION_LINE" | awk -F'+' '{print $2}')
          [[ -z "$CURRENT_BUILD" ]] && CURRENT_BUILD=1
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RUN_NUM=${GITHUB_RUN_NUMBER:-1}
            BUILD_NUMBER=$((CURRENT_BUILD + RUN_NUM))
          else
            BUILD_NUMBER="$CURRENT_BUILD"
          fi
          {
            echo "RELEASE_TAG=$RELEASE_TAG"
            echo "VERSION_NAME=$VERSION_NAME"
            echo "BUILD_NUMBER=$BUILD_NUMBER"
          } >> "$GITHUB_ENV"

      - name: Generate Release Notes
        id: release_notes
        if: github.event_name == 'push'
        shell: bash
        run: |
          set -euo pipefail
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          {
            echo "## What's Changed"
            echo ""
            git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG"..${{ github.ref_name }}
          } > release_notes.md
          {
            echo "RELEASE_NOTES<<EOF"
            cat release_notes.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          merge-multiple: true

      - name: List Downloaded Artifacts
        run: ls -R release-artifacts

      - name: Build Artifact List
        id: artifact_list
        shell: bash
        run: |
          set -euo pipefail
          ARTIFACT_LIST=$(find release-artifacts -type f -print | paste -sd, -)
          if [ -z "$ARTIFACT_LIST" ]; then
            echo "No artifacts found to upload."
            exit 1
          fi
          echo "ARTIFACT_LIST=$ARTIFACT_LIST" >> "$GITHUB_ENV"
          echo "Artifacts: $ARTIFACT_LIST"

      - name: Create or Update Release (tag push)
        if: github.event_name == 'push'
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.ARTIFACT_LIST }}
          tag: ${{ env.RELEASE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          generateReleaseNotes: true
          allowUpdates: true
          makeLatest: true

      - name: Update Existing Release (manual rebuild)
        if: github.event_name == 'workflow_dispatch'
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.ARTIFACT_LIST }}
          tag: ${{ env.RELEASE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          removeArtifacts: ${{ inputs.remove_old_assets }}
          makeLatest: true
          omitBodyDuringUpdate: true