name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Existing release tag to update (e.g. v1.2.3)'
        required: true
        type: string
      remove_old_assets:
        description: 'Remove existing assets before uploading new ones'
        required: false
        default: true
        type: boolean

jobs:
  build-android:
    name: Build Android
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install Dependencies
        run: flutter pub get

      - name: Generate Freezed Classes
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Determine Release Tag and Version
        id: meta
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_TAG="${{ inputs.tag }}"
          else
            RELEASE_TAG="${{ github.ref_name }}"
          fi
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          VERSION_NAME="${RELEASE_TAG#v}"
            echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

          CURRENT_VERSION_LINE=$(grep "^version:" pubspec.yaml || true)
          CURRENT_BUILD=$(echo "$CURRENT_VERSION_LINE" | awk -F'+' '{print $2}')
          if [[ -z "$CURRENT_BUILD" ]]; then CURRENT_BUILD=1; fi

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BASE_BUILD=$CURRENT_BUILD
            RUN_NUM=${GITHUB_RUN_NUMBER:-1}
            BUILD_NUMBER=$((BASE_BUILD + RUN_NUM))
          else
            BUILD_NUMBER="$CURRENT_BUILD"
          fi
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "Using tag=$RELEASE_TAG version=$VERSION_NAME build=$BUILD_NUMBER"

      - name: Create Keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > app/conduit-keystore.jks
          echo "${{ secrets.ANDROID_KEY_PROPERTIES_BASE64 }}" | base64 --decode > key.properties
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEY_PROPERTIES_BASE64: ${{ secrets.ANDROID_KEY_PROPERTIES_BASE64 }}
        working-directory: android

      - name: Build APK (per ABI)
        run: flutter build apk --split-per-abi --release --build-name "$VERSION_NAME" --build-number "$BUILD_NUMBER"

      - name: Build App Bundle
        run: flutter build appbundle --release --build-name "$VERSION_NAME" --build-number "$BUILD_NUMBER"

      - name: Upload Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: |
            build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
            build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
            build/app/outputs/flutter-apk/app-x86_64-release.apk
            build/app/outputs/bundle/release/app-release.aab

  build-ios:
    name: Build iOS
    runs-on: macos-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install Dependencies
        run: flutter pub get

      - name: Generate Freezed Classes
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Install CocoaPods Dependencies
        run: |
          cd ios
          pod install --repo-update
        shell: bash

      - name: Determine Release Tag and Version
        id: meta
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_TAG="${{ inputs.tag }}"
          else
            RELEASE_TAG="${{ github.ref_name }}"
          fi
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          VERSION_NAME="${RELEASE_TAG#v}"
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

          CURRENT_VERSION_LINE=$(grep "^version:" pubspec.yaml || true)
          CURRENT_BUILD=$(echo "$CURRENT_VERSION_LINE" | awk -F'+' '{print $2}')
          if [[ -z "$CURRENT_BUILD" ]]; then CURRENT_BUILD=1; fi

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BASE_BUILD=$CURRENT_BUILD
            RUN_NUM=${GITHUB_RUN_NUMBER:-1}
            BUILD_NUMBER=$((BASE_BUILD + RUN_NUM))
          else
            BUILD_NUMBER="$CURRENT_BUILD"
          fi
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "Using tag=$RELEASE_TAG version=$VERSION_NAME build=$BUILD_NUMBER"

      - name: Build iOS (Unsigned IPA)
        run: flutter build ipa --release --no-codesign --build-name "$VERSION_NAME" --build-number "$BUILD_NUMBER"

      - name: Upload iOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios
          path: |
            build/ios/ipa/*.ipa

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs:
      - build-android
      - build-ios

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Determine Release Tag and Version
        id: meta
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_TAG="${{ inputs.tag }}"
          else
            RELEASE_TAG="${{ github.ref_name }}"
          fi
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          VERSION_NAME="${RELEASE_TAG#v}"
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

          CURRENT_VERSION_LINE=$(grep "^version:" pubspec.yaml || true)
          CURRENT_BUILD=$(echo "$CURRENT_VERSION_LINE" | awk -F'+' '{print $2}')
          if [[ -z "$CURRENT_BUILD" ]]; then CURRENT_BUILD=1; fi
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BASE_BUILD=$CURRENT_BUILD
            RUN_NUM=${GITHUB_RUN_NUMBER:-1}
            BUILD_NUMBER=$((BASE_BUILD + RUN_NUM))
          else
            BUILD_NUMBER="$CURRENT_BUILD"
          fi
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "Using tag=$RELEASE_TAG version=$VERSION_NAME build=$BUILD_NUMBER"

      - name: Generate Release Notes
        id: release_notes
        if: github.event_name == 'push'
        run: |
            PREVIOUS_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
            if [ -z "$PREVIOUS_TAG" ]; then
              PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            fi
            echo "## What's Changed" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..${{ github.ref_name }} >> release_notes.md
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
            cat release_notes.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          merge-multiple: true

      - name: List Downloaded Artifacts
        run: ls -R release-artifacts

      - name: Build Artifact List
        id: artifact_list
        run: |
          ARTIFACT_LIST=$(find release-artifacts -type f -print | paste -sd, -)
          echo "ARTIFACT_LIST=$ARTIFACT_LIST" >> $GITHUB_ENV
          echo "Artifacts: $ARTIFACT_LIST"

      - name: Create or Update Release (tag push)
        if: github.event_name == 'push'
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.ARTIFACT_LIST }}
          tag: ${{ env.RELEASE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          generateReleaseNotes: true
          allowUpdates: true
          makeLatest: true

      - name: Update Existing Release (manual rebuild)
        if: github.event_name == 'workflow_dispatch'
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ env.ARTIFACT_LIST }}
          tag: ${{ env.RELEASE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          removeArtifacts: ${{ inputs.remove_old_assets }}
          makeLatest: true
          omitBodyDuringUpdate: true
